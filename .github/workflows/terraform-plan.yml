# This workflow is executed whenever any files not ignored is pushed into GitHub, it will also trigger the terraform-apply-dev.yml to deploy the dev environment

name: 'Terraform Plan'
#on:
#  push:
#    paths-ignore:
#    - '.github/**'
#    - '**.md'
#    - '.gitignore'
#    branches:
#      - dev
#      - stg
#      - prod

# Uncomment for manual run of this Terraform Plan workflow
on: [workflow_dispatch]

jobs:
  # First job starts to get the current branch name so we can set the environment variable
  Get-Branch-Name:
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
        id: branch_check

      # Display what branch name we retrieved for the variable
      - name: Use variable setup in previous step
        run: echo "Retrieved the branch name ${{ steps.branch_check.outputs.branch }}"

    # Setting the branch variable so we can use it in the next job
    outputs:
      branch: ${{ steps.branch_check.outputs.branch }}

  # Concurrently run the Super Linter
  Lint:
    name: Lint-Code
    runs-on: ubuntu-latest
    steps: 
    - name: Checkout GitHub Actions
      uses: actions/checkout@v3

    - name: Super-Linter
      uses: github/super-linter@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BRANCH: dev
        #VALIDATE_ALL_CODEBASE: false
        #VALIDATE_TERRAFORM: true
        # Errors for the Super Linter can be turned off if needed
        DISABLE_ERRORS: true

  # Second job starts for Terraform after getting Branch Name (Super Linter is running in parallel)
  validate-terraform:
    needs: Get-Branch-Name
    name: 'Terraform plan'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    environment: ${{ needs.Get-Branch-Name.outputs.branch }}

    steps:
      # Display the branch name from previous job and the branch full path with github.ref variable
      - run: echo "Working on ${{ needs.Get-Branch-Name.outputs.branch }} branch"
      - run: echo Working on full path ${{github.ref}} branch

      - name: Checkout GitHub Actions
        uses: actions/checkout@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: 1.0.9
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: |
          terraform fmt -check
        working-directory: '.'

# Terraform Init, Validate, and Plan for Dev Environment
      - name: Terraform Dev Init
        id: tf_init_dev
        run: |
          terraform init \
            -reconfigure \
            -backend-config="storage_account_name=${{ secrets.DEV_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.DEV_STORAGE_CONTAINER_NAME }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="access_key=${{ secrets.DEV_STORAGE_ACCESS_KEY }}"
        if: github.ref == 'refs/heads/dev'
        working-directory: '.'

      - name: Terraform Dev Validate
        id: tf_validate_dev
        run: |
          terraform validate -no-color
        if: github.ref == 'refs/heads/dev'
        working-directory: '.'

      - name: Terraform Dev Plan
        id: tf_plan_dev
        run: |
          export TF_VAR_client_id=${{ secrets.DEV_ARM_CLIENT_ID }}
          export TF_VAR_client_secret=${{ secrets.DEV_ARM_CLIENT_SECRET }}
          export TF_VAR_tenant_id=${{ secrets.DEV_ARM_TENANT_ID }}
          export TF_VAR_subscription_id=${{ secrets.DEV_ARM_SUBSCRIPTION_ID }}
          export TF_VAR_admin_login=${{ secrets.DEV_PSQL_ADMINISTRATOR_LOGIN_PASSWORD }}
          export TF_VAR_administrator_login_password=${{ secrets.DEV_PSQL_ADMIN_LOGIN }}
          terraform plan --var-file=./Variables/terraform-dev.tfvars -no-color
        if: github.ref == 'refs/heads/dev'
        working-directory: '.'

# Terraform Init, Validate, and Plan for Stg Environment
      - name: Terraform Stg Init
        id: tf_init_stg
        run: |
          terraform init \
            -reconfigure \
            -backend-config="storage_account_name=${{ secrets.STG_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.STG_STORAGE_CONTAINER_NAME }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="access_key=${{ secrets.STG_STORAGE_ACCESS_KEY }}"
        if: github.ref == 'refs/heads/stg'
        working-directory: '.'

      - name: Terraform Stg Validate
        id: tf_validate_stg
        run: |
          terraform validate -no-color
        if: github.ref == 'refs/heads/stg'
        working-directory: '.'

      - name: Terraform Stg Plan
        id: tf_plan_stg
        run: |
          export TF_VAR_client_id=${{ secrets.STG_ARM_CLIENT_ID }}
          export TF_VAR_client_secret=${{ secrets.STG_ARM_CLIENT_SECRET }}
          export TF_VAR_tenant_id=${{ secrets.STG_ARM_TENANT_ID }}
          export TF_VAR_subscription_id=${{ secrets.STG_ARM_SUBSCRIPTION_ID }}
          export TF_VAR_admin_login=${{ secrets.STG_PSQL_ADMINISTRATOR_LOGIN_PASSWORD }}
          export TF_VAR_administrator_login_password=${{ secrets.STG_PSQL_ADMIN_LOGIN }}
          terraform plan --var-file=./Variables/terraform-stg.tfvars -no-color
        if: github.ref == 'refs/heads/stg'
        working-directory: '.'

# Terraform Init, Validate, and Plan for Prod Environment
      - name: Terraform Prod Init
        id: tf_init_prod
        run: |
          terraform init \
            -reconfigure \
            -backend-config="storage_account_name=${{ secrets.PROD_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.PROD_STORAGE_CONTAINER_NAME }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="access_key=${{ secrets.PROD_STORAGE_ACCESS_KEY }}"
        if: github.ref == 'refs/heads/prod'
        working-directory: '.'

      - name: Terraform Prod Validate
        id: tf_validate_prod
        run: |
          terraform validate -no-color
        if: github.ref == 'refs/heads/prod'
        working-directory: '.'

      - name: Terraform Prod Plan
        id: tf_plan_prod
        run: |
          export TF_VAR_client_id=${{ secrets.PROD_ARM_CLIENT_ID }}
          export TF_VAR_client_secret=${{ secrets.PROD_ARM_CLIENT_SECRET }}
          export TF_VAR_tenant_id=${{ secrets.PROD_ARM_TENANT_ID }}
          export TF_VAR_subscription_id=${{ secrets.PROD_ARM_SUBSCRIPTION_ID }}
          export TF_VAR_admin_login=${{ secrets.PROD_PSQL_ADMINISTRATOR_LOGIN_PASSWORD }}
          export TF_VAR_administrator_login_password=${{ secrets.PROD_PSQL_ADMIN_LOGIN }}
          terraform plan --var-file=./Variables/terraform-prod.tfvars -no-color
        if: github.ref == 'refs/heads/prod'
        working-directory: '.'